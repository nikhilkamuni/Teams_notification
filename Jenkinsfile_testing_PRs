pipeline {
    agent any

    environment {
        GITHUB_TOKEN = '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' // Hardcoded GitHub token
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the repository from the nightly branch
                git branch: 'nightly', url: 'https://github.com/nikhilkamuni/Teams_notification.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                // Install necessary Python packages
                sh 'pip install PyGithub requests'
            }
        }

        stage('Fetch Merged PRs') {
            steps {
                // Run the script to fetch the list of merged PRs
                script {
                    def output = sh(script: """
                        python3 << 'EOF'
import os
import subprocess
import re
from github import Github
from github.Repository import Repository

def get_pull_title(pull_id: int, repo: Repository) -> str:
    return repo.get_pull(pull_id).title

def check_pr_titles(repo: Repository, src_branch: str, dest_branch: str, regex: str) -> list:
    gitlog = subprocess.check_output(
        [
            "git",
            "log",
            "origin/" + dest_branch + "..origin/" + src_branch,
            "--merges",
            "--pretty=format:%s",
        ]
    ).decode()

    title_pattern = re.compile(regex)
    merge_pattern = re.compile("^Merge pull request #([0-9]+) from .*\$")

    merged_prs = []

    for line in gitlog.split("\\n"):
        merge_match = re.search(merge_pattern, line)
        if merge_match:
            pr_id = int(merge_match.group(1))
            title = get_pull_title(pr_id, repo)
            merged_prs.append(f"PR #{pr_id}: {title}")

    return merged_prs

github_personal_access_token = "${GITHUB_TOKEN}"
assert github_personal_access_token

github_object = Github(
    base_url="https://api.github.com",
    login_or_token=github_personal_access_token,
)
repo = github_object.get_repo("nikhilkamuni/Teams_notification")
merged_prs = check_pr_titles(repo, "nightly_success", "main", ".*")

for pr in merged_prs:
    print(pr)
EOF
                    """, returnStdout: true).trim()

                    echo "Merged PRs:\n${output}"
                }
            }
        }
    }

    post {
        success {
            script {
                // Merge nightly branch to nightly_success branch
                sh """
                git config --global user.email "nikhilkamuni@gmail.com"
                git config --global user.name "nikhilkamuni"
                git checkout nightly_success
                git merge origin/nightly -m "Automated merge from nightly to nightly_success"
                git push origin nightly_success
                """
            }
        }
    }
}
